# Project2_PersonalLifeOS.py

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import nltk
from nltk.sentiment import SentimentIntensityAnalyzer
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LinearRegression
import cv2
import torch
from transformers import pipeline

# 1. DATA SCIENCE + EDA + DATA ANALYTICS
def load_life_data():
    data = {
        'date': pd.date_range(start='2025-01-01', periods=5),
        'mood': [3, 4, 2, 5, 4],
        'steps': [4000, 7000, 3000, 9000, 8000]
    }
    df = pd.DataFrame(data)
    return df

def plot_mood_trends(df):
    sns.lineplot(x='date', y='mood', data=df)
    plt.title("Mood Trend Over Time")
    plt.show()

# 2. FEATURE ENGINEERING
def normalize_steps(df):
    scaler = MinMaxScaler()
    df['steps_norm'] = scaler.fit_transform(df[['steps']])
    return df

# 3. MACHINE LEARNING (Mood prediction)
def predict_next_mood(df):
    X = np.array(range(len(df))).reshape(-1,1)
    y = df['mood']
    model = LinearRegression()
    model.fit(X, y)
    next_day = np.array([[len(df)]])
    pred = model.predict(next_day)
    return pred[0]

# 4. NLP (Analyze journal entries)
def analyze_journal_entries(entries):
    nltk.download('vader_lexicon')
    sia = SentimentIntensityAnalyzer()
    return [sia.polarity_scores(entry) for entry in entries]

# 5. CV (Face detection)
def detect_face(image_path):
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    img = cv2.imread(image_path)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, 1.1, 4)
    return faces

# 6. DEEP LEARNING (Simple LSTM for mood sequence, placeholder)
def create_lstm_model():
    model = torch.nn.LSTM(input_size=1, hidden_size=5, num_layers=1, batch_first=True)
    return model

# 7. GENERATIVE AI (Personalized reminders)
def generate_reminder(prompt):
    generator = pipeline("text-generation", model="gpt2")
    return generator(prompt, max_length=30)[0]['generated_text']

# 8. AI Automation (Mood based activity suggestion)
def suggest_activity(mood_score):
    if mood_score > 4:
        return "Great mood! How about a social activity?"
    elif mood_score > 2:
        return "Keep steady. Maybe a walk outside?"
    else:
        return "Feeling low? Try meditation or rest."

# MAIN
if __name__ == "__main__":
    df = load_life_data()
    plot_mood_trends(df)
    df = normalize_steps(df)

    next_mood = predict_next_mood(df)
    print(f"Predicted mood for next day: {next_mood:.2f}")

    journal = ["I feel happy today", "Work is stressful", "Had a relaxing day"]
    sentiments = analyze_journal_entries(journal)
    print("Journal sentiments:", sentiments)

    faces = detect_face('face_photo.jpg')
    print(f"Faces detected: {len(faces)}")

    lstm_model = create_lstm_model()
    print("LSTM model created:", lstm_model)

    reminder = generate_reminder("Reminder: ")
    print("Generated reminder:", reminder)

    activity = suggest_activity(next_mood)
    print("Suggested activity:", activity)
